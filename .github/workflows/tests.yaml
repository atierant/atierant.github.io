name: '☕ Tests'

on:
  workflow_dispatch: ~
  push:
    branches:
      - main
  pull_request:

jobs:

  tests:
    name: '☕ Tests'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ ubuntu-latest ]
        php-versions: [ '8.2' ]

    steps:
      - name: '🛎️ Checkout'
        uses: actions/checkout@v4

      - name: '🔧 Setup node'
        uses: actions/setup-node@v4
        with:
          node-version: '16'
          cache: 'npm'

      - name: '🔧 Setup PHP'
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo
          tools: symfony
          coverage: "none"
          ini-values: "memory_limit=-1"

      - name: '📦 Set Composer Cache Directory'
        id: composer-cache
        #run: echo "::set-output name=directory::$(composer config cache-dir)" >> $GITHUB_OUTPUT
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: '📦 Cache Composer dependencies'
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: '📦 Cache resized images'
        uses: actions/cache@v4
        with:
          path: public/resized
          key: resized-images-tests-${{ secrets.CACHE_VERSION }}

      - name: '📦 Cache blurhash images'
        uses: actions/cache@v4
        with:
          path: var/cache/pools/app
          key: resized-blurhash-tests-${{ secrets.CACHE_VERSION }}

      - name: '🍕 Install composer dependencies'
        id: composer_deps
        run: |
          echo "::group::composer install"
            composer install --no-progress --ansi
          echo "::endgroup::"

      - name: '🍕 Install npm dependencies'
        id: npm_deps
        run: |
          echo "::group::npm install"
            npm install --color=always --no-progress --no-audit
          echo "::endgroup::"

      - name: '🍕 Install other dependencies'
        id: deps
        run: |
          # echo "::group::install phpunit"
          #   vendor/bin/simple-phpunit install
          # echo "::endgroup::"

      - name: '🔥 Warmup'
        run: |
          php bin/console cache:clear --ansi --no-warmup
          php bin/console cache:warmup --ansi
        env:
          APP_ENV: test

      - name: '✔ Composer validate'
        if: always() && steps.composer_deps.outcome == 'success'
        run: composer validate --no-check-publish

      - name: '🖌 Lint YAML'
        if: always() && steps.deps.outcome == 'success'
        run: make lint.yaml@integration

      - name: '🖌 Lint Twig'
        if: always() && steps.deps.outcome == 'success'
        run: make lint.twig@integration

      - name: '🖌 Lint JS'
        if: always() && steps.deps.outcome == 'success'
        run: make lint.eslint@integration
        continue-on-error: true

      - name: '🖌 Lint Parameters and Services'
        if: always() && steps.deps.outcome == 'success'
        run: make lint.container@integration

      - name: '⚙ PHP CS Fixer'
        if: always() && steps.deps.outcome == 'success'
        run: make lint.php-cs-fixer@integration

      - name: '⚙ PhpStan'
        if: always() && steps.deps.outcome == 'success'
        run: make lint.phpstan@integration
        continue-on-error: true

      # - name: '⚔ Run tests'
      #   run: vendor/bin/simple-phpunit --testdox

      - name: '⚙ Check build static'
        run: |
          npx encore production --color
          php bin/console stenope:build --no-interaction -vvv --ansi
        env:
          APP_ENV: prod
          NODE_ENV: production
          ROUTER_DEFAULT_URI: https://arnaud.tierant.me
